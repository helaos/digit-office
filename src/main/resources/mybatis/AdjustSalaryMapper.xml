<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.fatehole.office.mapper.AdjustSalaryMapper" >
  <resultMap id="BaseResultMap" type="com.fatehole.office.model.AdjustSalary" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="eid" property="eid" jdbcType="INTEGER" />
    <result column="adjust_date" property="adjustDate" jdbcType="DATE" />
    <result column="before_salary" property="beforeSalary" jdbcType="INTEGER" />
    <result column="after_salary" property="afterSalary" jdbcType="INTEGER" />
    <result column="reason" property="reason" jdbcType="VARCHAR" />
    <result column="remark" property="remark" jdbcType="VARCHAR" />
  </resultMap>
  <sql id="Base_Column_List" >
    id, eid, adjust_date, before_salary, after_salary, reason, remark
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from adjust_salary
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from adjust_salary
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.fatehole.office.model.AdjustSalary" >
    insert into adjust_salary (id, eid, adjust_date, 
      before_salary, after_salary, reason, 
      remark)
    values (#{id,jdbcType=INTEGER}, #{eid,jdbcType=INTEGER}, #{adjustDate,jdbcType=DATE}, 
      #{beforeSalary,jdbcType=INTEGER}, #{afterSalary,jdbcType=INTEGER}, #{reason,jdbcType=VARCHAR}, 
      #{remark,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.fatehole.office.model.AdjustSalary" >
    insert into adjust_salary
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="eid != null" >
        eid,
      </if>
      <if test="adjustDate != null" >
        adjust_date,
      </if>
      <if test="beforeSalary != null" >
        before_salary,
      </if>
      <if test="afterSalary != null" >
        after_salary,
      </if>
      <if test="reason != null" >
        reason,
      </if>
      <if test="remark != null" >
        remark,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="eid != null" >
        #{eid,jdbcType=INTEGER},
      </if>
      <if test="adjustDate != null" >
        #{adjustDate,jdbcType=DATE},
      </if>
      <if test="beforeSalary != null" >
        #{beforeSalary,jdbcType=INTEGER},
      </if>
      <if test="afterSalary != null" >
        #{afterSalary,jdbcType=INTEGER},
      </if>
      <if test="reason != null" >
        #{reason,jdbcType=VARCHAR},
      </if>
      <if test="remark != null" >
        #{remark,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.fatehole.office.model.AdjustSalary" >
    update adjust_salary
    <set >
      <if test="eid != null" >
        eid = #{eid,jdbcType=INTEGER},
      </if>
      <if test="adjustDate != null" >
        adjust_date = #{adjustDate,jdbcType=DATE},
      </if>
      <if test="beforeSalary != null" >
        before_salary = #{beforeSalary,jdbcType=INTEGER},
      </if>
      <if test="afterSalary != null" >
        after_salary = #{afterSalary,jdbcType=INTEGER},
      </if>
      <if test="reason != null" >
        reason = #{reason,jdbcType=VARCHAR},
      </if>
      <if test="remark != null" >
        remark = #{remark,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.fatehole.office.model.AdjustSalary" >
    update adjust_salary
    set eid = #{eid,jdbcType=INTEGER},
      adjust_date = #{adjustDate,jdbcType=DATE},
      before_salary = #{beforeSalary,jdbcType=INTEGER},
      after_salary = #{afterSalary,jdbcType=INTEGER},
      reason = #{reason,jdbcType=VARCHAR},
      remark = #{remark,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>